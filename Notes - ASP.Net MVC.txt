==============ASP.NET MVC course Notes=============================

prop+tab	:	creates a property
Ctrl+r 		:	refresh the browser
Ctrl+Shift+B: 	re-compile/build the program without reloading the browser
ctrl+tab: 	move between open windows in your project
mcvaction4+tab:	creates an action result
ctrl+shift+i : opens chrome development tools



==============ASP.NET MVC Fundamentals==============================
===Convention-based Routing========================================
custom routes in MVC
The order of the routes matters. order from the most specific to the most generic.
So create the custom route before the default route as follows:

public class RouteConfig
{
	public static void RegisterRoutes(RouteCollection routes)
	{
		routes.MapRoute(
			"TaskitemsByDueDate",
			"taskitems/due/{year}/{month}",
			new {controller = "Taskitems", action = "ByDueDate"},
			new {year = @"\d{4}", month = @"\d{2}" });
	}
}

Then create the ActionResult

public ActionResult ByDueDate(int year, int month)
{
	return Content(year + "/" + month);
}


A cleaner and better way of creating custom routes is to use Attribute Routing
1. first enable attribute route:
public class RouteConfig
{
	public static void RegisterRoutes(RouteCollection routes)
	{
		routes.MapMvcAttributeRoutes();
	}
}

2. create the attribute route:
public class TaskitemsController : Controller
{
	// GET: Tasks/Random
	[Route("taskitems/due/{year}/{month:regex(\\d{4}):range(1, 12)}")]
}
Applying constraints to attribute routes is more powerful. Other constraints supported by the frame work are: min, max, minlength, maxlength, int, float, guid etc.
To apply constraints to attribute routes, just google: ASP.NET MVC Attribute Route Constraints.

==============Passing Data to Views	========================================
1. model property
2. ViewData - no not use 
3. ViewBag - do not use as has casting issues and magic properties

Best to use model property

==============View Models	========================================
@model GoldenWayDuties.Models.Taskitem
@{
    ViewBag.Title = "Random";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@Model.Name</h2>
In the above random view, we just displayed the taskitem name. What if we want to display the list of the Owners?
We use a ViewModel. 
It is a model specifically build for a View. 
It includes any rows of data specific to the view

==============WORKING WITH DATA	========================================
Entity Frame (EF):
Def: a tool used to access a database. More acturately, its classified as a Object Relatinal Mapper (ORM)
Objects ----->Object / Relational Mapper (ORM) --->Relational Data
Objects <-----Object / Relational Mapper (ORM) <---Relational Data

EF provides a class called DbContext which is a gateway to our database.
DbContext has one or more DbSets which represents tables in our database.
We use LINQ to query these DbSets and EF translate our queries to SQL queries at run time.
There are two ways to use EF
i) Database First
ii) Code First

==============Code First Migration	========================================
Open package manager console as follows:
 - tools/Nutget package Manager/Package Manager Console
First time to use migration, you need to enable it:
PM> enable-migrations
PM> add-migration InitialModel -- creates a migration and name it 'intialModel'
PM> add-migration InitialModel -force ---this overwirtes an existing migration
PM> update-database --runs the migation and generates the database
==============Accessing Data from Database	========================================
We need a Db context to access the database:
private ApplicationDbContext _context;
Then initialise the Db context via a constructor:
public OwnersController()
{
	_context = new ApplicationDbContext();
}
This Db context is a diposable object. so we need to properly dispose this object by overriding the Dispose method of the base controller class.

protected override void Dispose(bool disposing)
{
	_context.Dispose();   
}
==============Building Forms=======================================
To create a Form, first we need an Action in the controller class. This action should return a view that includes the form.
        public ActionResult New()
        {
            return View();
        }
To render a form,we can us Html helper methods:


==============Model validation	========================================
Adding Validation
ASP.Net MVC uses data annotations to validate action parameters.
We can use model state property to get access to validation data.
ModelState object has a property called IsValid which we can use to change the application flow.
3 steps to follow to add validation:
i) Add data annotations on your entities e.g [Requires], [StringLength(255)],
ii) Use ModelState.IsValid to change the flow of the program. If the ModelState is not valid, return the same view.
	if (!ModelState.IsValid)
	{
		var viewModel = new OwnerFormViewModel
		{
			Owner = owner,
			ResidentTypes = _context.ResidentTypes.ToList()
		};
		return View("OwnerForm");
	}
ii) Add validation messages to our form.

****Custom Validation****
    public class Min20YearsIfParent : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var owner = (Owner) validationContext.ObjectInstance;

            if (owner.ResidentTypeId == 0 || owner.ResidentTypeId != 1)
                return ValidationResult.Success;

            if (owner.DateOfBirth == null)
                return new ValidationResult("date of birth required");

            var age = DateTime.Today.Year - owner.DateOfBirth.Value.Year;

           return (age >= 18)
                ? ValidationResult.Success 
                : new ValidationResult("Owner should be at least 18 years old to be a Parent");
           
        }
    }
	
    public class Owner
    {
        [Display(Name = "Date Of Birth")]
        [Min20YearsIfParent]
        public DateTime? DateOfBirth { get; set; }
    }

    <div class="form-group">
        @Html.LabelFor(m => m.Owner.DateOfBirth)
        @Html.TextBoxFor(m => m.Owner.DateOfBirth,"{0:d MMM yyyy}", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Owner.DateOfBirth)
    </div>
	
=============Re-factoring Magic Numbers========================================
    public class ResidentType
    {
        public static readonly byte Unknown = 0;
        public static readonly byte Parent = 1;
        public static readonly byte Teenager = 2;
        public static readonly byte Child = 3;
        public static readonly byte Toddler = 4;
    }
	{
		var owner = (Owner) validationContext.ObjectInstance;
		if (owner.ResidentTypeId == ResidentType.Unknown || owner.ResidentTypeId != ResidentType.Parent)
		return ValidationResult.Success;
	}

==============Anti-Forgery Token	========================================
Anti-Forgery token are used to prevent Cross-site Request Forgery (CSRF).
To prevent this type of attack, need to ensure the request only comes from our customer form and not from a different website. Need to follow two steps:
i) @Html.Anti-ForgeryToken() helper method to the form
ii) Decorate the Save action with [ValidateAntiForgeryToken] attribute
    [HttpPost] 
	[ValidateAntiForgeryToken]
MVC frame handles all the complexities of generating A token, encrypting it and  validating it.

==============RESTful Services=======================================

==============	========================================

==============	========================================

==============	========================================

==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================
==============	========================================